우리는 이번 장에서 아주 많은 새로운 것을 배웠다. 우리의 새로운 기술로 
쌓은 몇 가지 새로운 기능을 가진 Mesozoic Eden 소프트웨어의 사용자를 일깨울 시간이다:

1 .우리 공원에 있는 공룡의 생일을 관리하라. birthday 속성을 Dinosaur 클래스에 추가하라.

2.공원은 엄격한 스케쥴에 따라 운영한다. 급식 시간, 청소, 그리고 비상 훈련등을 기록하는 
  간단한 시스템을  Date API를 사용하여 생성하라 .

3. Mesozoic Eden 안에서, 우리는 아주 강한 안전-제일 정책을 갖고 있다. 
정규적인 점검은 우리의 안전에 대한 높은 기준을 유지하는 데 도움을 준다. 
마지막 안전 점검 날짜를 기준으로 공원의 다음 안전 검검까지 얼마나 많은 
날이 남아 있는 지 계산하는 프로그램을 만들어라. 안전 점검은 매 45일 마다 
일어나야 할 필요가 있다.

4.우리에게 새로 태어난 Theropod가 생겼다. 손님들에게 Mesozoic Eden의 우리의 
어린 거주자에게 줄 이름을 부탁하였다. 10 개의 이름이 선택됐다. 
이 10개의 이름에 대한 리스트를 만들어라.    


5. 우리는 새로 태아난 공룡의 전체 이름을 가진 스트링을 만들고 싶다. 
StringBuilder를 사용하여 모든 이름을 그것의 새로운 이름에 붙여라, 
그리고 당신이 붙이는 작업을 다 했으면 그것을 스트링으로 바꾸어라. 
(힌트: StringBuilder와 결합한 loop를 사용하라.)

------------------------------------------------------------------------------------------
우리는 Java Cor API를 사용하여 매일 매일 공룡 돌봄 활동을 기록하는 기능을 추가함으로 우리의 
“공룡 돌봄 시스템“을 계속 수행할 것이다. 이것은 사용자 입력, 활동 이력 유지, 그리고 시간이 
지남에 따라 공룡 건강 데이터를 저장하는 기능을 포함한다 . 걱정 마라- 우리는 당신을 위해서 
단계별로 해야 할 일을 제시할 것이다.

Step 1:  추가적인 자바 클래스를 더하라:
      -  새로운 패키지 coreapi를 만들어라.
      -  이 패키지 안에 Dinosaur 클래스를 만들고, 이름(name), 종(species), 건강 상태(health status),  
         등등의 속성을 추가하라
      -  또한 Activity 클래스를 만들고, 이름(name), date, dinosaur, 등 등의 속성을 추가하라.

Step 2: 공룡 돌봄 시스템을 확장하라:
      - 당신의 DinosaurCareSystem 클래스 안에, Dinosaur 객체를 갖는 List를 만들고, Activity 객체를
        갖는 또 다른 List를 생성하라.
      - addDinosaur() 메서드를 만들고 사용자 입력을 받고 새로운 공룡 객체를 만들어서 공룡 목록에 
        추가할 수 있는 기능을 구현하라.
      - logActivity() 메서드를 만들고 그것 역시 사용자 입력을 받아서 새로운 Activity 객체
       (리스트에서 공룡을 선택하는 것을 포함한)를 생성하고 활동 리스트에 추가하는 기능을 구현하라.
 
   여기 몇 가지 샘플 코드가 당신이 시작하는 데 도움을 줄 것이다:
    import jav.util.*;

    public class DinosaurCareSystem {
      private List<Dinosaur> dinodaurs;
      private List<Activity> activities;
      public DinosaurCarSystem() {
          dinosaurs = new ArrayList<>();
          activities  = new ArrayList<>();
      }
      public void addDinodaur(Dinosaur dinosaur) {
          dinosaurs.add(dinosaur);
      }
      public void logActivity(Activity activity) {
           activities.add(activity);           }
                 // … existing methods for handling exceptions here
  }

   Step 3: 대화형 시스템:
      - 당신의  드라이버 클래스에서 DinosaurCareSystem 객체를 만들고 사용자에게 
      그들이 원하는 것(공룡 추가, 활동 기록, 등등)을 계속 묻기 위해서 루푸를 사용하라. 
      Scanner 객체를 사용하여 사용자로부터 입력을 얻어라.

     여기 당신이 시작할 수 있는 약간의 코드가 있다:
  import java.utilScanner;
  public class Main { 
        public static void main(String[] args) {
          DinosaurCareSystem  system = new DinosaurCareSystem();
          Scanner scanner  = new Scanner(System.in);
           while (true) {
                   System.out.println(“What would you like to do?”);
                   System.out.println(“1. Add a dinosaur”);
                   System.out.println(“2. Log an activity”);
                    System.out.println(“3. Exit”);
                    int choice  = scanner.nextInt();
                    scanner.nextLine();   // consume newline
                                   if (choice = = 1) {
                           // add dinosaur
                } else if (choice  == 2) {
                           // log activity
                } else if (choice == 3) {
                         break;
                }
           }
      }
  }
 항상 그렇듯이, 자유롭게 이것을 확장하고 당신의 창의성이 마음껏 발휘되도록 하라.